// Main-Source: https://github.com/Gibberlings3/ItemRevisions/blob/master/item_rev/lib/macros.tpa
// Source is modified to serve personal needs.

// Purpose: I don`t know! Maybe it reserves memory?!
DEFINE_PATCH_FUNCTION ~FJ_SPL_ITM_REINDEX~ BEGIN

  PATCH_IF !(~%SOURCE_FILE%~ STRING_MATCHES_REGEXP ~^.+\.itm~) BEGIN
    hs = 0x38
  END


  READ_LONG 0x64  hf  //Extended header offset
  READ_SHORT 0x68 hc  //Extended header count
  READ_LONG 0x6a  fb  //Feature block table offset
  READ_SHORT 0x70 fc  //Feature block count


  PATCH_IF ((hf > fb) AND (hc > 0)) BEGIN // Ardanis: fixed "hc > 1" to "hc > 0"
    READ_ASCII hf ~eh~ ELSE ~fail~ (hs * hc)
    PATCH_IF (~%eh%~ STRING_EQUAL ~fail~) BEGIN  
      WHILE ((~%eh%~ STRING_EQUAL ~fail~) AND (hc > 0)) BEGIN
        READ_ASCII hf ~eh~ ELSE ~fail~ (hs * hc)
        hc -= 1
      END
    END
    DELETE_BYTES hf (hs * hc)

    hf       =  0x72
    WRITE_LONG  0x64 hf
    WRITE_SHORT 0x68 hc
    fb       =  (0x72 + (hs * hc))
    WRITE_LONG 0x6a fb

    PATCH_IF !(~%eh%~ STRING_EQUAL ~fail~) BEGIN
      INSERT_BYTES hf (hs * hc)
      WRITE_ASCIIE hf ~%eh%~
    END
  END 
  ELSE PATCH_IF ((hf != 0x72) AND (hc = 0)) BEGIN
    hf = 0x72
    WRITE_LONG 0x64 hf
  END


  FOR (i1 = 0; i1 < (hs * hc); i1 += hs) BEGIN
    WRITE_SHORT (hf + i1 + 0x20) fc
    READ_SHORT (hf + i1 + 0x1e) cx
    fc += cx
  END


  PATCH_IF (SOURCE_SIZE > (0x72 + (hs * hc) + (0x30 * fc))) BEGIN
    DELETE_BYTES (0x72 + (hs * hc) + (0x30 * fc)) (SOURCE_SIZE - (0x72 + (hs * hc) + (0x30 * fc)))
  END

  // added by Ardanis
  WRITE_SHORT 0x6e 0

END // end of function




// Purpose: Adds an item ability section
DEFINE_PATCH_FUNCTION ~ADD_ITEM_HEADER~
  INT_VAR
    copy_header=0
    insert_point=~-1~
  RET
    insert_point
BEGIN
  LPF ~FJ_SPL_ITM_REINDEX~ END


  hs      =   0x38
  READ_LONG   0x64 ho
  READ_SHORT  0x68 hc
  READ_LONG   0x6a eo
  insert_point  = (insert_point>hc || insert_point<0) ? hc : insert_point
  copy_header   = (copy_header<0) ? 0 : copy_header


  PATCH_IF copy_header>hc BEGIN
    PATCH_WARN ~Unable to copy %copy_header%th header, %SOURCE_FILE% contains only %hc% headers!~
  END 
  ELSE BEGIN
    INSERT_BYTES ho+insert_point*hs hs
    hc+=1
    eo+=hs


    PATCH_IF copy_header BEGIN
      READ_SHORT    ho+(copy_header - 1)*hs+0x1e ec
      READ_SHORT    ho+(copy_header - 1)*hs+0x20 ei
      READ_ASCII    eo+ei*0x30 effs (ec*0x30)
      READ_ASCII    ho+(copy_header - 1)*hs copy (hs)
      WRITE_ASCIIE  ho+insert_point*hs ~%copy%~ (hs)
    END


    WRITE_SHORT 0x68 hc
    WRITE_LONG  0x6a eo
    READ_SHORT 0x70 ei // technically, it is a counter


    FOR (i=ho;i<ho+hc*hs;i+=hs) BEGIN
      READ_SHORT i+0x1e ec
      WRITE_SHORT i+0x20 ei
      ei+=ec
    END


    PATCH_IF copy_header BEGIN
      READ_SHORT ho+insert_point*hs+0x1e ec
      READ_SHORT ho+insert_point*hs+0x20 ei
      INSERT_BYTES eo+ei*0x30 ec*0x30
      WRITE_ASCIIE eo+ei*0x30 ~%effs%~ (ec*0x30)
    END 
    ELSE BEGIN
      off=ho+insert_point*hs

      WRITE_BYTE    off       0 //type
      WRITE_BYTE    off+0x1   0 //required_id
      WRITE_BYTE    off+0x2   3 //location
      WRITE_BYTE    off+0x3   0 //alt_dicesize
      WRITE_ASCIIE  off+0x4   ~~//~%icon%~ (8)
      WRITE_BYTE    off+0xc   0 //target
      WRITE_BYTE    off+0xd   0 //target_count
      WRITE_SHORT   off+0xe   0 //range
      WRITE_BYTE    off+0x10  0 //projectile_type
      WRITE_BYTE    off+0x11  0 //alt_dicenumber
      WRITE_BYTE    off+0x12  0 //speed
      WRITE_BYTE    off+0x13  0 //alt_damage
      WRITE_SHORT   off+0x14  0 //thaco
      WRITE_BYTE    off+0x16  0 //dicesize
      WRITE_BYTE    off+0x17  0 //school
      WRITE_BYTE    off+0x18  0 //dicenumber
      WRITE_BYTE    off+0x19  0 //sectype
      WRITE_SHORT   off+0x1a  0 //damage
      WRITE_SHORT   off+0x1c  0 //damage_type
      WRITE_SHORT   off+0x22  0 //charges
      WRITE_SHORT   off+0x24  0 //depletion
      WRITE_LONG    off+0x26  0 //flags
      WRITE_SHORT   off+0x2a  1 //projectile
      WRITE_SHORT   off+0x2c  0 //overhand
      WRITE_SHORT   off+0x2e  0 //backhand
      WRITE_SHORT   off+0x30  0 //thrust
      WRITE_SHORT   off+0x32  0 //is_bow
      WRITE_SHORT   off+0x34  0 //is_xbow
      WRITE_SHORT   off+0x36  0 //is_sling
    END
  END
END // End of function